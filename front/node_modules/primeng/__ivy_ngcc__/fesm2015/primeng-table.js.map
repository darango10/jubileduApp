{"version":3,"sources":["C:/Users/arang/Desktop/JubileduApp/front/node_modules/primeng/fesm2015/primeng-table.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0CE,kGAGegDAq9Cf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAgSqC,AAwD7B;;;;;;;;;;;;;;;;;4HAKR;;;;;;;;;;;;0CAYwC,AAuB5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4IAmOZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mDAyCiD,AA+ChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHAwCjB;;;;;;;;;;;;;;;iDAe+C,AAU9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA4BjB;;;;;;wCAMsC,AAQ3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oJAgGX;;;;;;;;;;;;;;;;;;;;;;+CAsB6C,AAU7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4JAiChB;;;;;;;;;;;;;;;;qDAgBmD,AAS3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wJA6BxB;;;;;;;;;;;;;;;;oDAgBkD,AAQjC;;;;;;;;;;;;;;;;;;kGAcjB;;;;;;;;;;;;0CAYwC,AAK3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wLA2Db;;;;;;;;kEAQgE,AAK9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iFA6ElB;;;;;;;;;;;gDAW8C,AAK1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kMAqJpB;;;;;;;;;;;;;;;;;;;;;;;gDAuB8C,AAK7B;;;;;;;;;;oMAQjB;;;;;;;;;0DASwD,AAK1C;;;;;;;;;;;;;;WAUd;;;;;;;+CAO6C,AAK3B;;;;;;;;;;;;;;WAUlB;;;;;;;+CAO6C,AAK3B;;;;;;;;;;;;;;WAUlB;;;;;;;iDAO+C,AAK3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iFAuBpB;;;;;;;;;yBASuB,AAYtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAiCD;;;;;;;;;;;;;;;;uDAgBqD,AAgBlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DAgCnB;;;;;;;;;;;;;;;;oDAgBkD,AAgBlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA+DhB;;;;;;;;;;sDAUoD,AAgB9B;;;;;;;;;;4LAQtB;;;;;;oDAMkD,AAK3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHA8EvB;;;;;;;;;;;;;;6CAc2C,AAK1B;;;;;EAEjc","file":"primeng-table.js","sourcesContent":["import { Injectable, EventEmitter, ElementRef, NgZone, ChangeDetectorRef, Input, Output, ViewChild, ContentChildren, Component, HostListener, Directive, Optional, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils, FilterUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nlet TableService = class TableService {\n    constructor() {\n        this.sortSource = new Subject();\n        this.selectionSource = new Subject();\n        this.contextMenuSource = new Subject();\n        this.valueSource = new Subject();\n        this.totalRecordsSource = new Subject();\n        this.columnsSource = new Subject();\n        this.sortSource$ = this.sortSource.asObservable();\n        this.selectionSource$ = this.selectionSource.asObservable();\n        this.contextMenuSource$ = this.contextMenuSource.asObservable();\n        this.valueSource$ = this.valueSource.asObservable();\n        this.totalRecordsSource$ = this.totalRecordsSource.asObservable();\n        this.columnsSource$ = this.columnsSource.asObservable();\n    }\n    onSort(sortMeta) {\n        this.sortSource.next(sortMeta);\n    }\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n    onContextMenu(data) {\n        this.contextMenuSource.next(data);\n    }\n    onValueChange(value) {\n        this.valueSource.next(value);\n    }\n    onTotalRecordsChange(value) {\n        this.totalRecordsSource.next(value);\n    }\n    onColumnsChange(columns) {\n        this.columnsSource.next(columns);\n    }\n};\nTableService = __decorate([\n    Injectable()\n], TableService);\nlet Table = class Table {\n    constructor(el, zone, tableService, cd) {\n        this.el = el;\n        this.zone = zone;\n        this.tableService = tableService;\n        this.cd = cd;\n        this.pageLinks = 5;\n        this.alwaysShowPaginator = true;\n        this.paginatorPosition = 'bottom';\n        this.paginatorDropdownScrollHeight = '200px';\n        this.currentPageReportTemplate = '{currentPage} of {totalPages}';\n        this.defaultSortOrder = 1;\n        this.sortMode = 'single';\n        this.resetPageOnSort = true;\n        this.selectionChange = new EventEmitter();\n        this.contextMenuSelectionChange = new EventEmitter();\n        this.contextMenuSelectionMode = \"separate\";\n        this.rowTrackBy = (index, item) => item;\n        this.lazy = false;\n        this.lazyLoadOnInit = true;\n        this.compareSelectionBy = 'deepEquals';\n        this.csvSeparator = ',';\n        this.exportFilename = 'download';\n        this.filters = {};\n        this.filterDelay = 300;\n        this.expandedRowKeys = {};\n        this.editingRowKeys = {};\n        this.rowExpandMode = 'multiple';\n        this.virtualScrollDelay = 150;\n        this.virtualRowHeight = 28;\n        this.columnResizeMode = 'fit';\n        this.loadingIcon = 'pi pi-spinner';\n        this.showLoader = true;\n        this.stateStorage = 'session';\n        this.editMode = 'cell';\n        this.onRowSelect = new EventEmitter();\n        this.onRowUnselect = new EventEmitter();\n        this.onPage = new EventEmitter();\n        this.onSort = new EventEmitter();\n        this.onFilter = new EventEmitter();\n        this.onLazyLoad = new EventEmitter();\n        this.onRowExpand = new EventEmitter();\n        this.onRowCollapse = new EventEmitter();\n        this.onContextMenuSelect = new EventEmitter();\n        this.onColResize = new EventEmitter();\n        this.onColReorder = new EventEmitter();\n        this.onRowReorder = new EventEmitter();\n        this.onEditInit = new EventEmitter();\n        this.onEditComplete = new EventEmitter();\n        this.onEditCancel = new EventEmitter();\n        this.onHeaderCheckboxToggle = new EventEmitter();\n        this.sortFunction = new EventEmitter();\n        this.firstChange = new EventEmitter();\n        this.rowsChange = new EventEmitter();\n        this.onStateSave = new EventEmitter();\n        this.onStateRestore = new EventEmitter();\n        this._value = [];\n        this._totalRecords = 0;\n        this._first = 0;\n        this.selectionKeys = {};\n        this._sortOrder = 1;\n    }\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            if (this.restoringFilter) {\n                this.restoringFilter = false;\n            }\n        }\n        this.initialized = true;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                    break;\n                case 'header':\n                    this.headerTemplate = item.template;\n                    break;\n                case 'body':\n                    this.bodyTemplate = item.template;\n                    break;\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                    break;\n                case 'footer':\n                    this.footerTemplate = item.template;\n                    break;\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                    break;\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                    break;\n                case 'rowexpansion':\n                    this.expandedRowTemplate = item.template;\n                    break;\n                case 'frozenrows':\n                    this.frozenRowsTemplate = item.template;\n                    break;\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                    break;\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                    break;\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                    break;\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                    break;\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                    break;\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                    break;\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    ngAfterViewInit() {\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n    }\n    ngOnChanges(simpleChange) {\n        if (simpleChange.value) {\n            if (this.isStateful() && !this.stateRestored) {\n                this.restoreState();\n            }\n            this._value = simpleChange.value.currentValue;\n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter()) //sort already filters\n                    this._filter();\n            }\n            if (this.virtualScroll && this.virtualScrollCallback) {\n                this.virtualScrollCallback();\n            }\n            this.tableService.onValueChange(simpleChange.value.currentValue);\n        }\n        if (simpleChange.columns) {\n            this._columns = simpleChange.columns.currentValue;\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored) {\n                this.restoreColumnOrder();\n            }\n        }\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    get columns() {\n        return this._columns;\n    }\n    set columns(cols) {\n        this._columns = cols;\n    }\n    get first() {\n        return this._first;\n    }\n    set first(val) {\n        this._first = val;\n    }\n    get rows() {\n        return this._rows;\n    }\n    set rows(val) {\n        this._rows = val;\n    }\n    get totalRecords() {\n        return this._totalRecords;\n    }\n    set totalRecords(val) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n    get sortField() {\n        return this._sortField;\n    }\n    set sortField(val) {\n        this._sortField = val;\n    }\n    get sortOrder() {\n        return this._sortOrder;\n    }\n    set sortOrder(val) {\n        this._sortOrder = val;\n    }\n    get multiSortMeta() {\n        return this._multiSortMeta;\n    }\n    set multiSortMeta(val) {\n        this._multiSortMeta = val;\n    }\n    get selection() {\n        return this._selection;\n    }\n    set selection(val) {\n        this._selection = val;\n    }\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for (let data of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    }\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        this.firstChange.emit(this.first);\n        this.rowsChange.emit(this.rows);\n        this.tableService.onValueChange(this.value);\n        if (this.isStateful()) {\n            this.saveState();\n        }\n        this.anchorRowIndex = null;\n    }\n    sort(event) {\n        let originalEvent = event.originalEvent;\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n            if (this.resetPageOnSort) {\n                this.first = 0;\n                this.firstChange.emit(this.first);\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                }\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            this.sortMultiple();\n        }\n        if (this.isStateful()) {\n            this.saveState();\n        }\n        this.anchorRowIndex = null;\n    }\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.restoringSort) {\n                this.restoringSort = false;\n            }\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                        let result = null;\n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n                        return (this.sortOrder * result);\n                    });\n                }\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            let sortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    }\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\n                    });\n                }\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n    multisortField(data1, data2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        let result = null;\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        else if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n        return (multiSortMeta[index].order * result);\n    }\n    getSortMeta(field) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n        return null;\n    }\n    isSorted(field) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta) {\n                for (let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field) {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n    handleRowClick(event) {\n        let target = event.originalEvent.target;\n        let targetNode = target.nodeName;\n        let parentNode = target.parentElement && target.parentElement.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n            (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                DomHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                let rowData = event.rowData;\n                let selected = this.isSelected(rowData);\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n                if (metaSelection) {\n                    let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection || [];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n                            this._selection = [...this.selection, rowData];\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n            this.tableService.onSelectionChange();\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n        this.rowTouched = false;\n    }\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const rowData = event.rowData;\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = rowData;\n                this.contextMenuSelectionChange.emit(rowData);\n                this.onContextMenuSelect.emit({ originalEvent: event.originalEvent, data: rowData, index: event.rowIndex });\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(rowData);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(rowData);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = rowData;\n                        this.selectionChange.emit(rowData);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [rowData];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({ originalEvent: event, data: rowData, index: event.rowIndex });\n            }\n        }\n    }\n    selectRange(event, rowIndex) {\n        let rangeStart, rangeEnd;\n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n        if (this.lazy && this.paginator) {\n            rangeStart -= this.first;\n            rangeEnd -= this.first;\n        }\n        for (let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                this._selection = [...this.selection, rangeRowData];\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n                this.onRowSelect.emit({ originalEvent: event, data: rangeRowData, type: 'row' });\n            }\n        }\n        this.selectionChange.emit(this.selection);\n    }\n    clearSelectionRange(event) {\n        let rangeStart, rangeEnd;\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        for (let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.value[i];\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n            this.onRowUnselect.emit({ originalEvent: event, data: rangeRowData, type: 'row' });\n        }\n    }\n    isSelected(rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n        return false;\n    }\n    findIndexInSelection(rowData) {\n        let index = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        return index;\n    }\n    toggleRowWithRadio(event, rowData) {\n        this.preventSelectionSetterPropagation = true;\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton' });\n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton' });\n        }\n        this.tableService.onSelectionChange();\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n    toggleRowWithCheckbox(event, rowData) {\n        this.selection = this.selection || [];\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n        if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n        this.tableService.onSelectionChange();\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n    toggleRowsWithCheckbox(event, check) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice() : this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({ originalEvent: event, checked: check });\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n    equals(data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n    }\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        }\n        else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n        this.anchorRowIndex = null;\n    }\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n    isFilterBlank(filter) {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n    _filter() {\n        if (!this.restoringFilter) {\n            this.first = 0;\n            this.firstChange.emit(this.first);\n        }\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields || this.columns;\n                }\n                this.filteredValue = [];\n                for (let i = 0; i < this.value.length; i++) {\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let localFiltered = false;\n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let dataFieldValue = ObjectUtils.resolveFieldData(this.value[i], filterField);\n                            let filterConstraint = FilterUtils[filterMatchMode];\n                            if (!filterConstraint(dataFieldValue, filterValue)) {\n                                localMatch = false;\n                            }\n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let globalFilterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n                            globalMatch = FilterUtils[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value);\n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n                    let matches;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n        this.tableService.onValueChange(this.value);\n        if (this.isStateful() && !this.restoringFilter) {\n            this.saveState();\n        }\n        if (this.restoringFilter) {\n            this.restoringFilter = false;\n        }\n        this.cd.detectChanges();\n    }\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n        return !empty;\n    }\n    createLazyLoadMetadata() {\n        return {\n            first: this.first,\n            rows: this.virtualScroll ? this.rows * 2 : this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n    reset() {\n        this._sortField = null;\n        this._sortOrder = this.defaultSortOrder;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        this.filteredValue = null;\n        this.filters = {};\n        this.first = 0;\n        this.firstChange.emit(this.first);\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n    exportCSV(options) {\n        let data = this.filteredValue || this.value;\n        let csv = '';\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n        //headers\n        for (let i = 0; i < this.columns.length; i++) {\n            let column = this.columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n                if (i < (this.columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n        //body\n        data.forEach((record, i) => {\n            csv += '\\n';\n            for (let i = 0; i < this.columns.length; i++) {\n                let column = this.columns[i];\n                if (column.exportable !== false && column.field) {\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\n                    if (cellData != null) {\n                        if (this.exportFunction) {\n                            cellData = this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n                    csv += '\"' + cellData + '\"';\n                    if (i < (this.columns.length - 1)) {\n                        csv += this.csvSeparator;\n                    }\n                }\n            }\n        });\n        let blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            let link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    }\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n                this.editingCellClick = false;\n            };\n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n    initRowEdit(rowData) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        this.editingRowKeys[dataKeyValue] = true;\n    }\n    saveRowEdit(rowData, rowElement) {\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n            delete this.editingRowKeys[dataKeyValue];\n        }\n    }\n    cancelRowEdit(rowData) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        delete this.editingRowKeys[dataKeyValue];\n    }\n    toggleRow(rowData, event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n            this.expandedRowKeys[dataKeyValue] = true;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        if (event) {\n            event.preventDefault();\n        }\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n    isRowExpanded(rowData) {\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n    isRowEditing(rowData) {\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let minWidth = parseInt(column.style.minWidth || 15);\n        if (columnWidth + delta < minWidth) {\n            delta = minWidth - columnWidth;\n        }\n        const newColumnWidth = columnWidth + delta;\n        if (newColumnWidth >= minWidth) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-body-table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (newColumnWidth > minWidth) {\n                    if (this.scrollable) {\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n                    }\n                    else {\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                        column.style.width = newColumnWidth + 'px';\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                    }\n                }\n            }\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body');\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-header');\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-footer');\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, 'table.ui-table-scrollable-body-table');\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.ui-table-scrollable-header-table');\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.ui-table-scrollable-footer-table');\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n        let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n                table.style.width = width + 'px';\n            }\n        };\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n        if (column) {\n            let resizeColumnIndex = DomHandler.index(column);\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        }\n    }\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-table-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n            if (this.draggedColumn != dropHeader) {\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n                }\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n                if (this.isStateful()) {\n                    this.zone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            this.saveState();\n                        });\n                    });\n                }\n            }\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n    onRowDragStart(event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b'); // For firefox\n    }\n    onRowDragOver(event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n            let pageY = event.pageY;\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n            let prevRowElement = rowElement.previousElementSibling;\n            if (pageY < rowMidY) {\n                DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    DomHandler.addClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n                this.droppedRowIndex = index + 1;\n                DomHandler.addClass(rowElement, 'ui-table-dragpoint-bottom');\n            }\n        }\n    }\n    onRowDragLeave(event, rowElement) {\n        let prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n        }\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-top');\n    }\n    onRowDragEnd(event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    }\n    onRowDrop(event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: dropIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    }\n    handleVirtualScroll(event) {\n        this.first = (event.page - 1) * this.rows;\n        this.firstChange.emit(this.first);\n        this.virtualScrollCallback = event.callback;\n        this.zone.run(() => {\n            if (this.virtualScrollTimer) {\n                clearTimeout(this.virtualScrollTimer);\n            }\n            this.virtualScrollTimer = setTimeout(() => {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }, this.virtualScrollDelay);\n        });\n    }\n    isEmpty() {\n        let data = this.filteredValue || this.value;\n        return data == null || data.length == 0;\n    }\n    getBlockableElement() {\n        return this.el.nativeElement.children[0];\n    }\n    getStorage() {\n        switch (this.stateStorage) {\n            case 'local':\n                return window.localStorage;\n            case 'session':\n                return window.sessionStorage;\n            default:\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n        }\n    }\n    isStateful() {\n        return this.stateKey != null;\n    }\n    saveState() {\n        const storage = this.getStorage();\n        let state = {};\n        if (this.paginator) {\n            state.first = this.first;\n            state.rows = this.rows;\n        }\n        if (this.sortField) {\n            state.sortField = this.sortField;\n            state.sortOrder = this.sortOrder;\n        }\n        if (this.multiSortMeta) {\n            state.multiSortMeta = this.multiSortMeta;\n        }\n        if (this.hasFilter()) {\n            state.filters = this.filters;\n        }\n        if (this.resizableColumns) {\n            this.saveColumnWidths(state);\n        }\n        if (this.reorderableColumns) {\n            this.saveColumnOrder(state);\n        }\n        if (this.selection) {\n            state.selection = this.selection;\n        }\n        if (Object.keys(this.expandedRowKeys).length) {\n            state.expandedRowKeys = this.expandedRowKeys;\n        }\n        if (Object.keys(state).length) {\n            storage.setItem(this.stateKey, JSON.stringify(state));\n        }\n        this.onStateSave.emit(state);\n    }\n    clearState() {\n        const storage = this.getStorage();\n        if (this.stateKey) {\n            storage.removeItem(this.stateKey);\n        }\n    }\n    restoreState() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state = JSON.parse(stateString);\n            if (this.paginator) {\n                this.first = state.first;\n                this.rows = state.rows;\n                this.firstChange.emit(this.first);\n                this.rowsChange.emit(this.rows);\n            }\n            if (state.sortField) {\n                this.restoringSort = true;\n                this._sortField = state.sortField;\n                this._sortOrder = state.sortOrder;\n            }\n            if (state.multiSortMeta) {\n                this.restoringSort = true;\n                this._multiSortMeta = state.multiSortMeta;\n            }\n            if (state.filters) {\n                this.restoringFilter = true;\n                this.filters = state.filters;\n            }\n            if (this.resizableColumns) {\n                this.columnWidthsState = state.columnWidths;\n                this.tableWidthState = state.tableWidth;\n            }\n            if (state.expandedRowKeys) {\n                this.expandedRowKeys = state.expandedRowKeys;\n            }\n            if (state.selection) {\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n            }\n            this.stateRestored = true;\n            this.onStateRestore.emit(state);\n        }\n    }\n    saveColumnWidths(state) {\n        let widths = [];\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\n        state.columnWidths = widths.join(',');\n        if (this.columnResizeMode === 'expand') {\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table').style.width :\n                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\n        }\n    }\n    restoreColumnWidths() {\n        if (this.columnWidthsState) {\n            let widths = this.columnWidthsState.split(',');\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                if (this.scrollable) {\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n                    this.containerViewChild.nativeElement.style.width = this.tableWidthState;\n                }\n            }\n            if (this.scrollable) {\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table > colgroup > col');\n                let bodyCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-body-table > colgroup > col');\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\n            }\n            else {\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\n            }\n        }\n    }\n    saveColumnOrder(state) {\n        if (this.columns) {\n            let columnOrder = [];\n            this.columns.map(column => {\n                columnOrder.push(column.field || column.key);\n            });\n            state.columnOrder = columnOrder;\n        }\n    }\n    restoreColumnOrder() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state = JSON.parse(stateString);\n            let columnOrder = state.columnOrder;\n            if (columnOrder) {\n                let reorderedColumns = [];\n                columnOrder.map(key => reorderedColumns.push(this.findColumnByKey(key)));\n                this.columnOrderStateRestored = true;\n                this.columns = reorderedColumns;\n            }\n        }\n    }\n    findColumnByKey(key) {\n        if (this.columns) {\n            for (let col of this.columns) {\n                if (col.key === key || col.field === key)\n                    return col;\n                else\n                    continue;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n};\nTable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: TableService },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], Table.prototype, \"frozenColumns\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"frozenValue\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"style\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"styleClass\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"tableStyle\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"tableStyleClass\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"paginator\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"pageLinks\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"rowsPerPageOptions\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"alwaysShowPaginator\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"paginatorPosition\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"paginatorDropdownAppendTo\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"paginatorDropdownScrollHeight\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"currentPageReportTemplate\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"showCurrentPageReport\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"defaultSortOrder\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"sortMode\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"resetPageOnSort\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"selectionMode\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"selectionChange\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"contextMenuSelection\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"contextMenuSelectionChange\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"contextMenuSelectionMode\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"dataKey\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"metaKeySelection\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"rowTrackBy\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"lazy\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"lazyLoadOnInit\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"compareSelectionBy\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"csvSeparator\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"exportFilename\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"filters\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"globalFilterFields\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"filterDelay\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"expandedRowKeys\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"editingRowKeys\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"rowExpandMode\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"scrollable\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"scrollHeight\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"virtualScroll\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"virtualScrollDelay\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"virtualRowHeight\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"frozenWidth\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"responsive\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"contextMenu\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"resizableColumns\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"columnResizeMode\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"reorderableColumns\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"loading\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"loadingIcon\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"showLoader\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"rowHover\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"customSort\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"autoLayout\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"exportFunction\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"stateKey\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"stateStorage\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"editMode\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onRowSelect\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onRowUnselect\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onPage\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onSort\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onFilter\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onLazyLoad\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onRowExpand\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onRowCollapse\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onContextMenuSelect\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onColResize\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onColReorder\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onRowReorder\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onEditInit\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onEditComplete\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onEditCancel\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onHeaderCheckboxToggle\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"sortFunction\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"firstChange\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"rowsChange\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onStateSave\", void 0);\n__decorate([\n    Output()\n], Table.prototype, \"onStateRestore\", void 0);\n__decorate([\n    ViewChild('container', { static: false })\n], Table.prototype, \"containerViewChild\", void 0);\n__decorate([\n    ViewChild('resizeHelper', { static: false })\n], Table.prototype, \"resizeHelperViewChild\", void 0);\n__decorate([\n    ViewChild('reorderIndicatorUp', { static: false })\n], Table.prototype, \"reorderIndicatorUpViewChild\", void 0);\n__decorate([\n    ViewChild('reorderIndicatorDown', { static: false })\n], Table.prototype, \"reorderIndicatorDownViewChild\", void 0);\n__decorate([\n    ViewChild('table', { static: false })\n], Table.prototype, \"tableViewChild\", void 0);\n__decorate([\n    ContentChildren(PrimeTemplate)\n], Table.prototype, \"templates\", void 0);\n__decorate([\n    Input()\n], Table.prototype, \"value\", null);\n__decorate([\n    Input()\n], Table.prototype, \"columns\", null);\n__decorate([\n    Input()\n], Table.prototype, \"first\", null);\n__decorate([\n    Input()\n], Table.prototype, \"rows\", null);\n__decorate([\n    Input()\n], Table.prototype, \"totalRecords\", null);\n__decorate([\n    Input()\n], Table.prototype, \"sortField\", null);\n__decorate([\n    Input()\n], Table.prototype, \"sortOrder\", null);\n__decorate([\n    Input()\n], Table.prototype, \"multiSortMeta\", null);\n__decorate([\n    Input()\n], Table.prototype, \"selection\", null);\nTable = __decorate([\n    Component({\n        selector: 'p-table',\n        template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n            [ngClass]=\"{'ui-table ui-widget': true, 'ui-table-responsive': responsive, 'ui-table-resizable': resizableColumns,\n                'ui-table-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'ui-table-hoverable-rows': (rowHover||selectionMode), 'ui-table-auto-layout': autoLayout}\">\n            <div class=\"ui-table-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-table-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-table-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-table-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            \n            <div class=\"ui-table-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot *ngIf=\"footerTemplate\" class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"ui-table-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-table-scrollable-view ui-table-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-table-scrollable-view\" [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n            \n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            \n                <div *ngIf=\"summaryTemplate\" class=\"ui-table-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n        providers: [TableService]\n    })\n], Table);\nlet TableBody = class TableBody {\n    constructor(dt) {\n        this.dt = dt;\n    }\n};\nTableBody.ctorParameters = () => [\n    { type: Table }\n];\n__decorate([\n    Input(\"pTableBody\")\n], TableBody.prototype, \"columns\", void 0);\n__decorate([\n    Input(\"pTableBodyTemplate\")\n], TableBody.prototype, \"template\", void 0);\n__decorate([\n    Input()\n], TableBody.prototype, \"frozen\", void 0);\nTableBody = __decorate([\n    Component({\n        selector: '[pTableBody]',\n        template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `\n    })\n], TableBody);\nlet ScrollableView = class ScrollableView {\n    constructor(dt, el, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.zone = zone;\n        this.loadingArray = [];\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n                    if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                        this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                    }\n                }, 50);\n            });\n        });\n        if (this.dt.virtualScroll) {\n            this.totalRecordsSubscription = this.dt.tableService.totalRecordsSource$.subscribe(() => {\n                this.zone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        this.setVirtualScrollerHeight();\n                    }, 50);\n                });\n            });\n        }\n        this.loadingArray = Array(this.dt.rows).fill(1);\n        this.initialized = false;\n    }\n    get scrollHeight() {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val) {\n        this._scrollHeight = val;\n        this.setScrollHeight();\n    }\n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.setScrollHeight();\n            this.initialized = true;\n        }\n    }\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');\n            }\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-table-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n            let scrollableView = this.el.nativeElement.nextElementSibling;\n            if (scrollableView) {\n                this.scrollableSiblingBody = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body');\n            }\n        }\n        this.bindEvents();\n        this.setScrollHeight();\n        this.alignScrollBar();\n        if (this.frozen) {\n            this.columnsSubscription = this.dt.tableService.columnsSource$.subscribe(() => {\n                this.zone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        this.setScrollHeight();\n                    }, 50);\n                });\n            });\n        }\n        if (this.dt.virtualScroll) {\n            this.setVirtualScrollerHeight();\n            if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n            }\n        }\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n        this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n    onHeaderScroll(event) {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onFooterScroll(event) {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n        this.preventBodyScrollPropagation = true;\n    }\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\n        }\n        if (this.dt.virtualScroll) {\n            let viewport = DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n            let tableHeight = DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\n            let pageHeight = this.dt.virtualRowHeight * this.dt.rows;\n            let virtualTableHeight = DomHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\n            let pageCount = (virtualTableHeight / pageHeight) || 1;\n            let scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top || '0';\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) || (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\n                if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                    this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n                    this.scrollLoadingTableViewChild.nativeElement.style.top = this.scrollBodyViewChild.nativeElement.scrollTop + 'px';\n                }\n                let page = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\n                this.dt.handleVirtualScroll({\n                    page: page,\n                    callback: () => {\n                        if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                            this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                        }\n                        this.scrollTableViewChild.nativeElement.style.top = ((page - 1) * pageHeight) + 'px';\n                        if (this.frozenSiblingBody) {\n                            this.frozenSiblingBody.children[0].style.top = this.scrollTableViewChild.nativeElement.style.top;\n                        }\n                        this.dt.anchorRowIndex = null;\n                    }\n                });\n            }\n        }\n    }\n    setScrollHeight() {\n        if (this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            if (this.scrollHeight.indexOf('%') !== -1) {\n                let relativeHeight;\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\n                this.scrollBodyViewChild.nativeElement.style.height = '100px'; //temporary height to calculate static height\n                let containerHeight = DomHandler.getOuterHeight(this.dt.el.nativeElement.children[0]);\n                if (this.scrollHeight.includes(\"calc\")) {\n                    let percentHeight = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"(\") + 1, this.scrollHeight.indexOf(\"%\")));\n                    let diffValue = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"-\") + 1, this.scrollHeight.indexOf(\")\")));\n                    relativeHeight = (DomHandler.getOuterHeight(this.dt.el.nativeElement.parentElement) * percentHeight / 100) - diffValue;\n                }\n                else {\n                    relativeHeight = DomHandler.getOuterHeight(this.dt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\n                }\n                let staticHeight = containerHeight - 100; //total height of headers, footers, paginators\n                let scrollBodyHeight = (relativeHeight - staticHeight);\n                if (this.frozen) {\n                    scrollBodyHeight -= DomHandler.calculateScrollbarWidth();\n                }\n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\n            }\n            else {\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;\n            }\n        }\n    }\n    setVirtualScrollerHeight() {\n        if (this.virtualScrollerViewChild.nativeElement) {\n            this.virtualScrollerViewChild.nativeElement.style.height = this.dt.totalRecords * this.dt.virtualRowHeight + 'px';\n        }\n    }\n    hasVerticalOverflow() {\n        return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        this.frozenSiblingBody = null;\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        if (this.totalRecordsSubscription) {\n            this.totalRecordsSubscription.unsubscribe();\n        }\n        if (this.columnsSubscription) {\n            this.columnsSubscription.unsubscribe();\n        }\n        this.initialized = false;\n    }\n};\nScrollableView.ctorParameters = () => [\n    { type: Table },\n    { type: ElementRef },\n    { type: NgZone }\n];\n__decorate([\n    Input(\"pScrollableView\")\n], ScrollableView.prototype, \"columns\", void 0);\n__decorate([\n    Input()\n], ScrollableView.prototype, \"frozen\", void 0);\n__decorate([\n    ViewChild('scrollHeader', { static: true })\n], ScrollableView.prototype, \"scrollHeaderViewChild\", void 0);\n__decorate([\n    ViewChild('scrollHeaderBox', { static: true })\n], ScrollableView.prototype, \"scrollHeaderBoxViewChild\", void 0);\n__decorate([\n    ViewChild('scrollBody', { static: true })\n], ScrollableView.prototype, \"scrollBodyViewChild\", void 0);\n__decorate([\n    ViewChild('scrollTable', { static: true })\n], ScrollableView.prototype, \"scrollTableViewChild\", void 0);\n__decorate([\n    ViewChild('loadingTable', { static: false })\n], ScrollableView.prototype, \"scrollLoadingTableViewChild\", void 0);\n__decorate([\n    ViewChild('scrollFooter', { static: true })\n], ScrollableView.prototype, \"scrollFooterViewChild\", void 0);\n__decorate([\n    ViewChild('scrollFooterBox', { static: true })\n], ScrollableView.prototype, \"scrollFooterBoxViewChild\", void 0);\n__decorate([\n    ViewChild('virtualScroller', { static: false })\n], ScrollableView.prototype, \"virtualScrollerViewChild\", void 0);\n__decorate([\n    ViewChild('scrollableAligner', { static: false })\n], ScrollableView.prototype, \"scrollableAlignerViewChild\", void 0);\n__decorate([\n    Input()\n], ScrollableView.prototype, \"scrollHeight\", null);\nScrollableView = __decorate([\n    Component({\n        selector: '[pScrollableView]',\n        template: `\n        <div #scrollHeader class=\"ui-table-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-table-scrollable-header-box\">\n                <table class=\"ui-table-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\">\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n                        </ng-template>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div #scrollBody class=\"ui-table-scrollable-body\">\n            <table #scrollTable [ngClass]=\"{'ui-table-scrollable-body-table': true, 'ui-table-virtual-table': dt.virtualScroll}\" [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <table #loadingTable *ngIf=\"dt.virtualScroll && dt.loadingBodyTemplate != null\" [ngClass]=\"{'ui-table-scrollable-body-table ui-table-loading-virtual-table': true, 'ui-table-virtual-table': dt.virtualScroll}\">\n                <tbody class=\"ui-table-tbody\">\n                    <ng-template ngFor [ngForOf]=\"loadingArray\">\n                        <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {columns: columns}\"></ng-container>\n                    </ng-template>\n                </tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            <div #virtualScroller class=\"ui-table-virtual-scroller\" *ngIf=\"dt.virtualScroll\"></div>\n        </div>\n        <div #scrollFooter class=\"ui-table-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-table-scrollable-footer-box\">\n                <table class=\"ui-table-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n    })\n], ScrollableView);\nlet SortableColumn = class SortableColumn {\n    constructor(dt) {\n        this.dt = dt;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n    updateSortState() {\n        this.sorted = this.dt.isSorted(this.field);\n    }\n    onClick(event) {\n        let targetNode = event.target;\n        if ((DomHandler.hasClass(targetNode, 'ui-sortable-column') || DomHandler.hasClass(targetNode, 'ui-sortable-column-icon')) && this.isEnabled()) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n            DomHandler.clearSelection();\n        }\n    }\n    onEnterKey(event) {\n        this.onClick(event);\n    }\n    isEnabled() {\n        return this.pSortableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nSortableColumn.ctorParameters = () => [\n    { type: Table }\n];\n__decorate([\n    Input(\"pSortableColumn\")\n], SortableColumn.prototype, \"field\", void 0);\n__decorate([\n    Input()\n], SortableColumn.prototype, \"pSortableColumnDisabled\", void 0);\n__decorate([\n    HostListener('click', ['$event'])\n], SortableColumn.prototype, \"onClick\", null);\n__decorate([\n    HostListener('keydown.enter', ['$event'])\n], SortableColumn.prototype, \"onEnterKey\", null);\nSortableColumn = __decorate([\n    Directive({\n        selector: '[pSortableColumn]',\n        host: {\n            '[class.ui-sortable-column]': 'isEnabled()',\n            '[class.ui-state-highlight]': 'sorted',\n            '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\n        }\n    })\n], SortableColumn);\nlet SortIcon = class SortIcon {\n    constructor(dt) {\n        this.dt = dt;\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n    ngOnInit() {\n        this.updateSortState();\n    }\n    onClick(event) {\n        event.preventDefault();\n    }\n    updateSortState() {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            let sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order : 0;\n        }\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nSortIcon.ctorParameters = () => [\n    { type: Table }\n];\n__decorate([\n    Input()\n], SortIcon.prototype, \"field\", void 0);\nSortIcon = __decorate([\n    Component({\n        selector: 'p-sortIcon',\n        template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\n    `\n    })\n], SortIcon);\nlet SelectableRow = class SelectableRow {\n    constructor(dt, tableService) {\n        this.dt = dt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n    onTouchEnd(event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            const row = event.target;\n            switch (event.which) {\n                //down arrow\n                case 40:\n                    let nextRow = this.findNextSelectableRow(row);\n                    if (nextRow) {\n                        nextRow.focus();\n                    }\n                    event.preventDefault();\n                    break;\n                //up arrow\n                case 38:\n                    let prevRow = this.findPrevSelectableRow(row);\n                    if (prevRow) {\n                        prevRow.focus();\n                    }\n                    event.preventDefault();\n                    break;\n                //enter\n                case 13:\n                    this.dt.handleRowClick({\n                        originalEvent: event,\n                        rowData: this.data,\n                        rowIndex: this.index\n                    });\n                    break;\n                default:\n                    //no op\n                    break;\n            }\n        }\n    }\n    findNextSelectableRow(row) {\n        let nextRow = row.nextElementSibling;\n        if (nextRow) {\n            if (DomHandler.hasClass(nextRow, 'ui-selectable-row'))\n                return nextRow;\n            else\n                return this.findNextSelectableRow(nextRow);\n        }\n        else {\n            return null;\n        }\n    }\n    findPrevSelectableRow(row) {\n        let prevRow = row.previousElementSibling;\n        if (prevRow) {\n            if (DomHandler.hasClass(prevRow, 'ui-selectable-row'))\n                return prevRow;\n            else\n                return this.findPrevSelectableRow(prevRow);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nSelectableRow.ctorParameters = () => [\n    { type: Table },\n    { type: TableService }\n];\n__decorate([\n    Input(\"pSelectableRow\")\n], SelectableRow.prototype, \"data\", void 0);\n__decorate([\n    Input(\"pSelectableRowIndex\")\n], SelectableRow.prototype, \"index\", void 0);\n__decorate([\n    Input()\n], SelectableRow.prototype, \"pSelectableRowDisabled\", void 0);\n__decorate([\n    HostListener('click', ['$event'])\n], SelectableRow.prototype, \"onClick\", null);\n__decorate([\n    HostListener('touchend', ['$event'])\n], SelectableRow.prototype, \"onTouchEnd\", null);\n__decorate([\n    HostListener('keydown', ['$event'])\n], SelectableRow.prototype, \"onKeyDown\", null);\nSelectableRow = __decorate([\n    Directive({\n        selector: '[pSelectableRow]',\n        host: {\n            '[class.ui-selectable-row]': 'isEnabled()',\n            '[class.ui-state-highlight]': 'selected',\n            '[attr.tabindex]': 'isEnabled() ? 0 : undefined',\n        }\n    })\n], SelectableRow);\nlet SelectableRowDblClick = class SelectableRowDblClick {\n    constructor(dt, tableService) {\n        this.dt = dt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nSelectableRowDblClick.ctorParameters = () => [\n    { type: Table },\n    { type: TableService }\n];\n__decorate([\n    Input(\"pSelectableRowDblClick\")\n], SelectableRowDblClick.prototype, \"data\", void 0);\n__decorate([\n    Input(\"pSelectableRowIndex\")\n], SelectableRowDblClick.prototype, \"index\", void 0);\n__decorate([\n    Input()\n], SelectableRowDblClick.prototype, \"pSelectableRowDisabled\", void 0);\n__decorate([\n    HostListener('dblclick', ['$event'])\n], SelectableRowDblClick.prototype, \"onClick\", null);\nSelectableRowDblClick = __decorate([\n    Directive({\n        selector: '[pSelectableRowDblClick]',\n        host: {\n            '[class.ui-selectable-row]': 'isEnabled()',\n            '[class.ui-state-highlight]': 'selected'\n        }\n    })\n], SelectableRowDblClick);\nlet ContextMenuRow = class ContextMenuRow {\n    constructor(dt, tableService) {\n        this.dt = dt;\n        this.tableService = tableService;\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\n                this.selected = this.dt.equals(this.data, data);\n            });\n        }\n    }\n    onContextMenu(event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.pContextMenuRowDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nContextMenuRow.ctorParameters = () => [\n    { type: Table },\n    { type: TableService }\n];\n__decorate([\n    Input(\"pContextMenuRow\")\n], ContextMenuRow.prototype, \"data\", void 0);\n__decorate([\n    Input(\"pContextMenuRowIndex\")\n], ContextMenuRow.prototype, \"index\", void 0);\n__decorate([\n    Input()\n], ContextMenuRow.prototype, \"pContextMenuRowDisabled\", void 0);\n__decorate([\n    HostListener('contextmenu', ['$event'])\n], ContextMenuRow.prototype, \"onContextMenu\", null);\nContextMenuRow = __decorate([\n    Directive({\n        selector: '[pContextMenuRow]',\n        host: {\n            '[class.ui-contextmenu-selected]': 'selected'\n        }\n    })\n], ContextMenuRow);\nlet RowToggler = class RowToggler {\n    constructor(dt) {\n        this.dt = dt;\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    }\n    isEnabled() {\n        return this.pRowTogglerDisabled !== true;\n    }\n};\nRowToggler.ctorParameters = () => [\n    { type: Table }\n];\n__decorate([\n    Input('pRowToggler')\n], RowToggler.prototype, \"data\", void 0);\n__decorate([\n    Input()\n], RowToggler.prototype, \"pRowTogglerDisabled\", void 0);\n__decorate([\n    HostListener('click', ['$event'])\n], RowToggler.prototype, \"onClick\", null);\nRowToggler = __decorate([\n    Directive({\n        selector: '[pRowToggler]'\n    })\n], RowToggler);\nlet ResizableColumn = class ResizableColumn {\n    constructor(dt, el, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n    onMouseDown(event) {\n        if (event.which === 1) {\n            this.dt.onColumnResizeBegin(event);\n            this.bindDocumentEvents();\n        }\n    }\n    onDocumentMouseMove(event) {\n        this.dt.onColumnResize(event);\n    }\n    onDocumentMouseUp(event) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n    isEnabled() {\n        return this.pResizableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        this.unbindDocumentEvents();\n    }\n};\nResizableColumn.ctorParameters = () => [\n    { type: Table },\n    { type: ElementRef },\n    { type: NgZone }\n];\n__decorate([\n    Input()\n], ResizableColumn.prototype, \"pResizableColumnDisabled\", void 0);\nResizableColumn = __decorate([\n    Directive({\n        selector: '[pResizableColumn]'\n    })\n], ResizableColumn);\nlet ReorderableColumn = class ReorderableColumn {\n    constructor(dt, el, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n    onDragStart(event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    }\n    onDragOver(event) {\n        event.preventDefault();\n    }\n    onDragEnter(event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n    onDragLeave(event) {\n        this.dt.onColumnDragLeave(event);\n    }\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n    isEnabled() {\n        return this.pReorderableColumnDisabled !== true;\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n};\nReorderableColumn.ctorParameters = () => [\n    { type: Table },\n    { type: ElementRef },\n    { type: NgZone }\n];\n__decorate([\n    Input()\n], ReorderableColumn.prototype, \"pReorderableColumnDisabled\", void 0);\n__decorate([\n    HostListener('drop', ['$event'])\n], ReorderableColumn.prototype, \"onDrop\", null);\nReorderableColumn = __decorate([\n    Directive({\n        selector: '[pReorderableColumn]'\n    })\n], ReorderableColumn);\nlet EditableColumn = class EditableColumn {\n    constructor(dt, el, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n    onClick(event) {\n        if (this.isEnabled()) {\n            this.dt.editingCellClick = true;\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.dt.isEditingCellValid()) {\n                        return;\n                    }\n                    DomHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n    openCell() {\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.dt.onEditInit.emit({ field: this.field, data: this.data });\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n                if (focusableElement) {\n                    focusableElement.focus();\n                }\n            }, 50);\n        });\n    }\n    closeEditingCell() {\n        DomHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n        this.dt.editingCell = null;\n        this.dt.editingCellData = null;\n        this.dt.editingCellField = null;\n        this.dt.unbindDocumentEditListener();\n    }\n    onKeyDown(event) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell();\n                    this.dt.onEditComplete.emit({ field: this.field, data: this.data, originalEvent: event });\n                }\n                event.preventDefault();\n            }\n            //escape\n            else if (event.keyCode == 27) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell();\n                    this.dt.onEditCancel.emit({ field: this.field, data: this.data, originalEvent: event });\n                }\n                event.preventDefault();\n            }\n            //tab\n            else if (event.keyCode == 9) {\n                this.dt.onEditComplete.emit({ field: this.field, data: this.data, originalEvent: event });\n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n    moveToPreviousCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(event.target, 'blur');\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    moveToNextCell(event) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n        if (targetCell) {\n            DomHandler.invokeElementMethod(event.target, 'blur');\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n    findPreviousEditableColumn(cell) {\n        let prevCell = cell.previousElementSibling;\n        if (!prevCell) {\n            let previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n    findNextEditableColumn(cell) {\n        let nextCell = cell.nextElementSibling;\n        if (!nextCell) {\n            let nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n    isEnabled() {\n        return this.pEditableColumnDisabled !== true;\n    }\n};\nEditableColumn.ctorParameters = () => [\n    { type: Table },\n    { type: ElementRef },\n    { type: NgZone }\n];\n__decorate([\n    Input(\"pEditableColumn\")\n], EditableColumn.prototype, \"data\", void 0);\n__decorate([\n    Input(\"pEditableColumnField\")\n], EditableColumn.prototype, \"field\", void 0);\n__decorate([\n    Input()\n], EditableColumn.prototype, \"pEditableColumnDisabled\", void 0);\n__decorate([\n    Input()\n], EditableColumn.prototype, \"pFocusCellSelector\", void 0);\n__decorate([\n    HostListener('click', ['$event'])\n], EditableColumn.prototype, \"onClick\", null);\n__decorate([\n    HostListener('keydown', ['$event'])\n], EditableColumn.prototype, \"onKeyDown\", null);\nEditableColumn = __decorate([\n    Directive({\n        selector: '[pEditableColumn]'\n    })\n], EditableColumn);\nlet EditableRow = class EditableRow {\n    constructor(el) {\n        this.el = el;\n    }\n    isEnabled() {\n        return this.pEditableRowDisabled !== true;\n    }\n};\nEditableRow.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input(\"pEditableRow\")\n], EditableRow.prototype, \"data\", void 0);\n__decorate([\n    Input()\n], EditableRow.prototype, \"pEditableRowDisabled\", void 0);\nEditableRow = __decorate([\n    Directive({\n        selector: '[pEditableRow]'\n    })\n], EditableRow);\nlet InitEditableRow = class InitEditableRow {\n    constructor(dt, editableRow) {\n        this.dt = dt;\n        this.editableRow = editableRow;\n    }\n    onClick(event) {\n        this.dt.initRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n};\nInitEditableRow.ctorParameters = () => [\n    { type: Table },\n    { type: EditableRow }\n];\n__decorate([\n    HostListener('click', ['$event'])\n], InitEditableRow.prototype, \"onClick\", null);\nInitEditableRow = __decorate([\n    Directive({\n        selector: '[pInitEditableRow]'\n    })\n], InitEditableRow);\nlet SaveEditableRow = class SaveEditableRow {\n    constructor(dt, editableRow) {\n        this.dt = dt;\n        this.editableRow = editableRow;\n    }\n    onClick(event) {\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n        event.preventDefault();\n    }\n};\nSaveEditableRow.ctorParameters = () => [\n    { type: Table },\n    { type: EditableRow }\n];\n__decorate([\n    HostListener('click', ['$event'])\n], SaveEditableRow.prototype, \"onClick\", null);\nSaveEditableRow = __decorate([\n    Directive({\n        selector: '[pSaveEditableRow]'\n    })\n], SaveEditableRow);\nlet CancelEditableRow = class CancelEditableRow {\n    constructor(dt, editableRow) {\n        this.dt = dt;\n        this.editableRow = editableRow;\n    }\n    onClick(event) {\n        this.dt.cancelRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n};\nCancelEditableRow.ctorParameters = () => [\n    { type: Table },\n    { type: EditableRow }\n];\n__decorate([\n    HostListener('click', ['$event'])\n], CancelEditableRow.prototype, \"onClick\", null);\nCancelEditableRow = __decorate([\n    Directive({\n        selector: '[pCancelEditableRow]'\n    })\n], CancelEditableRow);\nlet CellEditor = class CellEditor {\n    constructor(dt, editableColumn, editableRow) {\n        this.dt = dt;\n        this.editableColumn = editableColumn;\n        this.editableRow = editableRow;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    get editing() {\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\n            (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\n    }\n};\nCellEditor.ctorParameters = () => [\n    { type: Table },\n    { type: EditableColumn, decorators: [{ type: Optional }] },\n    { type: EditableRow, decorators: [{ type: Optional }] }\n];\n__decorate([\n    ContentChildren(PrimeTemplate)\n], CellEditor.prototype, \"templates\", void 0);\nCellEditor = __decorate([\n    Component({\n        selector: 'p-cellEditor',\n        template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n    }),\n    __param(1, Optional()), __param(2, Optional())\n], CellEditor);\nlet TableRadioButton = class TableRadioButton {\n    constructor(dt, tableService) {\n        this.dt = dt;\n        this.tableService = tableService;\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nTableRadioButton.ctorParameters = () => [\n    { type: Table },\n    { type: TableService }\n];\n__decorate([\n    Input()\n], TableRadioButton.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], TableRadioButton.prototype, \"value\", void 0);\n__decorate([\n    Input()\n], TableRadioButton.prototype, \"index\", void 0);\n__decorate([\n    ViewChild('box', { static: true })\n], TableRadioButton.prototype, \"boxViewChild\", void 0);\nTableRadioButton = __decorate([\n    Component({\n        selector: 'p-tableRadioButton',\n        template: `\n        <div class=\"ui-radiobutton ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\">\n            </div>\n            <div #box [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"radio\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'pi pi-circle-on':checked}\"></span>\n            </div>\n        </div>\n    `\n    })\n], TableRadioButton);\nlet TableCheckbox = class TableCheckbox {\n    constructor(dt, tableService) {\n        this.dt = dt;\n        this.tableService = tableService;\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n};\nTableCheckbox.ctorParameters = () => [\n    { type: Table },\n    { type: TableService }\n];\n__decorate([\n    Input()\n], TableCheckbox.prototype, \"disabled\", void 0);\n__decorate([\n    Input()\n], TableCheckbox.prototype, \"value\", void 0);\n__decorate([\n    Input()\n], TableCheckbox.prototype, \"index\", void 0);\n__decorate([\n    ViewChild('box', { static: true })\n], TableCheckbox.prototype, \"boxViewChild\", void 0);\nTableCheckbox = __decorate([\n    Component({\n        selector: 'p-tableCheckbox',\n        template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n    })\n], TableCheckbox);\nlet TableHeaderCheckbox = class TableHeaderCheckbox {\n    constructor(dt, tableService) {\n        this.dt = dt;\n        this.tableService = tableService;\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n    onClick(event) {\n        if (!this.disabled) {\n            if (this.dt.value && this.dt.value.length > 0) {\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\n            }\n        }\n        DomHandler.clearSelection();\n    }\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n    isDisabled() {\n        return this.disabled || !this.dt.value || !this.dt.value.length;\n    }\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n    updateCheckedState() {\n        if (this.dt.filteredValue) {\n            const val = this.dt.filteredValue;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\n        }\n        else {\n            const val = this.dt.value;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n        }\n    }\n    isAllFilteredValuesChecked() {\n        if (!this.dt.filteredValue) {\n            return false;\n        }\n        else {\n            for (let rowData of this.dt.filteredValue) {\n                if (!this.dt.isSelected(rowData)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n};\nTableHeaderCheckbox.ctorParameters = () => [\n    { type: Table },\n    { type: TableService }\n];\n__decorate([\n    ViewChild('box', { static: true })\n], TableHeaderCheckbox.prototype, \"boxViewChild\", void 0);\n__decorate([\n    Input()\n], TableHeaderCheckbox.prototype, \"disabled\", void 0);\nTableHeaderCheckbox = __decorate([\n    Component({\n        selector: 'p-tableHeaderCheckbox',\n        template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"isDisabled()\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': isDisabled()}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n    })\n], TableHeaderCheckbox);\nlet ReorderableRowHandle = class ReorderableRowHandle {\n    constructor(el) {\n        this.el = el;\n    }\n    ngAfterViewInit() {\n        DomHandler.addClass(this.el.nativeElement, 'ui-table-reorderablerow-handle');\n    }\n};\nReorderableRowHandle.ctorParameters = () => [\n    { type: ElementRef }\n];\n__decorate([\n    Input(\"pReorderableRowHandle\")\n], ReorderableRowHandle.prototype, \"index\", void 0);\nReorderableRowHandle = __decorate([\n    Directive({\n        selector: '[pReorderableRowHandle]'\n    })\n], ReorderableRowHandle);\nlet ReorderableRow = class ReorderableRow {\n    constructor(dt, el, zone) {\n        this.dt = dt;\n        this.el = el;\n        this.zone = zone;\n    }\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    }\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n            this.dragEndListener = this.onDragEnd.bind(this);\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\n            this.dragOverListener = this.onDragOver.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n    onMouseDown(event) {\n        if (DomHandler.hasClass(event.target, 'ui-table-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    }\n    onDragStart(event) {\n        this.dt.onRowDragStart(event, this.index);\n    }\n    onDragEnd(event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    }\n    onDragOver(event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    }\n    onDragLeave(event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    }\n    isEnabled() {\n        return this.pReorderableRowDisabled !== true;\n    }\n    onDrop(event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n        event.preventDefault();\n    }\n};\nReorderableRow.ctorParameters = () => [\n    { type: Table },\n    { type: ElementRef },\n    { type: NgZone }\n];\n__decorate([\n    Input(\"pReorderableRow\")\n], ReorderableRow.prototype, \"index\", void 0);\n__decorate([\n    Input()\n], ReorderableRow.prototype, \"pReorderableRowDisabled\", void 0);\n__decorate([\n    HostListener('drop', ['$event'])\n], ReorderableRow.prototype, \"onDrop\", null);\nReorderableRow = __decorate([\n    Directive({\n        selector: '[pReorderableRow]'\n    })\n], ReorderableRow);\nlet TableModule = class TableModule {\n};\nTableModule = __decorate([\n    NgModule({\n        imports: [CommonModule, PaginatorModule],\n        exports: [Table, SharedModule, SortableColumn, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow],\n        declarations: [Table, SortableColumn, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, TableBody, ScrollableView, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow]\n    })\n], TableModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CancelEditableRow, CellEditor, ContextMenuRow, EditableColumn, EditableRow, InitEditableRow, ReorderableColumn, ReorderableRow, ReorderableRowHandle, ResizableColumn, RowToggler, SaveEditableRow, ScrollableView, SelectableRow, SelectableRowDblClick, SortIcon, SortableColumn, Table, TableBody, TableCheckbox, TableHeaderCheckbox, TableModule, TableRadioButton, TableService };\n"]}